// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */

import { initFormatters } from './formatters'
import type { Locales, Namespaces, Translations } from './i18n-types'
import { loadedFormatters, loadedLocales, locales } from './i18n-util'

const localeTranslationLoaders = {
	eng: () => import('./eng'),
	swa: () => import('./swa'),
}

const localeNamespaceLoaders = {
	eng: {
		auth: () => import('./eng/auth'),
		balances: () => import('./eng/balances'),
		feedback: () => import('./eng/feedback'),
		helpers: () => import('./eng/helpers'),
		languages: () => import('./eng/languages'),
		main: () => import('./eng/main'),
		pins: () => import('./eng/pins'),
		profile: () => import('./eng/profile'),
		registration: () => import('./eng/registration'),
		settings: () => import('./eng/settings'),
		sms: () => import('./eng/sms'),
		socialRecovery: () => import('./eng/socialRecovery'),
		statement: () => import('./eng/statement'),
		transfer: () => import('./eng/transfer'),
		voucher: () => import('./eng/voucher')
	},
	swa: {
		auth: () => import('./swa/auth'),
		balances: () => import('./swa/balances'),
		feedback: () => import('./swa/feedback'),
		helpers: () => import('./swa/helpers'),
		languages: () => import('./swa/languages'),
		main: () => import('./swa/main'),
		pins: () => import('./swa/pins'),
		profile: () => import('./swa/profile'),
		registration: () => import('./swa/registration'),
		settings: () => import('./swa/settings'),
		sms: () => import('./swa/sms'),
		socialRecovery: () => import('./swa/socialRecovery'),
		statement: () => import('./swa/statement'),
		transfer: () => import('./swa/transfer'),
		voucher: () => import('./swa/voucher')
	}
}

const updateDictionary = (locale: Locales, dictionary: Partial<Translations>): Translations =>
	loadedLocales[locale] = { ...loadedLocales[locale], ...dictionary }

export const importLocaleAsync = async (locale: Locales): Promise<Translations> =>
	(await localeTranslationLoaders[locale]()).default as unknown as Translations

export const loadLocaleAsync = async (locale: Locales): Promise<void> => {
	updateDictionary(locale, await importLocaleAsync(locale))
	loadFormatters(locale)
}

export const loadAllLocalesAsync = (): Promise<void[]> => Promise.all(locales.map(loadLocaleAsync))

export const loadFormatters = (locale: Locales): void =>
	void (loadedFormatters[locale] = initFormatters(locale))

export const importNamespaceAsync = async<Namespace extends Namespaces>(locale: Locales, namespace: Namespace) =>
	(await localeNamespaceLoaders[locale][namespace]()).default as unknown as Translations[Namespace]

export const loadNamespaceAsync = async <Namespace extends Namespaces>(locale: Locales, namespace: Namespace): Promise<void> =>
	void updateDictionary(locale, { [namespace]: await importNamespaceAsync(locale, namespace )})
