// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */

import { initFormatters } from './formatters'
import type { Locales, Namespaces, Translations } from './i18n-types'
import { loadedFormatters, loadedLocales, locales } from './i18n-util'

const localeTranslationLoaders = {
	eng: () => import('./eng'),
	fra: () => import('./fra'),
	gax: () => import('./gax'),
	kam: () => import('./kam'),
	kik: () => import('./kik'),
	luo: () => import('./luo'),
	mij: () => import('./mij'),
	swa: () => import('./swa'),
}

const localeNamespaceLoaders = {
	eng: {
		auth: () => import('./eng/auth'),
		balances: () => import('./eng/balances'),
		feedback: () => import('./eng/feedback'),
		helpers: () => import('./eng/helpers'),
		languages: () => import('./eng/languages'),
		main: () => import('./eng/main'),
		pins: () => import('./eng/pins'),
		profile: () => import('./eng/profile'),
		registration: () => import('./eng/registration'),
		settings: () => import('./eng/settings'),
		sms: () => import('./eng/sms'),
		socialRecovery: () => import('./eng/socialRecovery'),
		statement: () => import('./eng/statement'),
		transfer: () => import('./eng/transfer'),
		voucher: () => import('./eng/voucher')
	},
	fra: {
		auth: () => import('./fra/auth'),
		balances: () => import('./fra/balances'),
		feedback: () => import('./fra/feedback'),
		helpers: () => import('./fra/helpers'),
		languages: () => import('./fra/languages'),
		main: () => import('./fra/main'),
		pins: () => import('./fra/pins'),
		profile: () => import('./fra/profile'),
		registration: () => import('./fra/registration'),
		settings: () => import('./fra/settings'),
		sms: () => import('./fra/sms'),
		socialRecovery: () => import('./fra/socialRecovery'),
		statement: () => import('./fra/statement'),
		transfer: () => import('./fra/transfer'),
		voucher: () => import('./fra/voucher')
	},
	gax: {
		auth: () => import('./gax/auth'),
		balances: () => import('./gax/balances'),
		feedback: () => import('./gax/feedback'),
		helpers: () => import('./gax/helpers'),
		languages: () => import('./gax/languages'),
		main: () => import('./gax/main'),
		pins: () => import('./gax/pins'),
		profile: () => import('./gax/profile'),
		registration: () => import('./gax/registration'),
		settings: () => import('./gax/settings'),
		sms: () => import('./gax/sms'),
		socialRecovery: () => import('./gax/socialRecovery'),
		statement: () => import('./gax/statement'),
		transfer: () => import('./gax/transfer'),
		voucher: () => import('./gax/voucher')
	},
	kam: {
		auth: () => import('./kam/auth'),
		balances: () => import('./kam/balances'),
		feedback: () => import('./kam/feedback'),
		helpers: () => import('./kam/helpers'),
		languages: () => import('./kam/languages'),
		main: () => import('./kam/main'),
		pins: () => import('./kam/pins'),
		profile: () => import('./kam/profile'),
		registration: () => import('./kam/registration'),
		settings: () => import('./kam/settings'),
		sms: () => import('./kam/sms'),
		socialRecovery: () => import('./kam/socialRecovery'),
		statement: () => import('./kam/statement'),
		transfer: () => import('./kam/transfer'),
		voucher: () => import('./kam/voucher')
	},
	kik: {
		auth: () => import('./kik/auth'),
		balances: () => import('./kik/balances'),
		feedback: () => import('./kik/feedback'),
		helpers: () => import('./kik/helpers'),
		languages: () => import('./kik/languages'),
		main: () => import('./kik/main'),
		pins: () => import('./kik/pins'),
		profile: () => import('./kik/profile'),
		registration: () => import('./kik/registration'),
		settings: () => import('./kik/settings'),
		sms: () => import('./kik/sms'),
		socialRecovery: () => import('./kik/socialRecovery'),
		statement: () => import('./kik/statement'),
		transfer: () => import('./kik/transfer'),
		voucher: () => import('./kik/voucher')
	},
	luo: {
		auth: () => import('./luo/auth'),
		balances: () => import('./luo/balances'),
		feedback: () => import('./luo/feedback'),
		helpers: () => import('./luo/helpers'),
		languages: () => import('./luo/languages'),
		main: () => import('./luo/main'),
		pins: () => import('./luo/pins'),
		profile: () => import('./luo/profile'),
		registration: () => import('./luo/registration'),
		settings: () => import('./luo/settings'),
		sms: () => import('./luo/sms'),
		socialRecovery: () => import('./luo/socialRecovery'),
		statement: () => import('./luo/statement'),
		transfer: () => import('./luo/transfer'),
		voucher: () => import('./luo/voucher')
	},
	mij: {
		auth: () => import('./mij/auth'),
		balances: () => import('./mij/balances'),
		feedback: () => import('./mij/feedback'),
		helpers: () => import('./mij/helpers'),
		languages: () => import('./mij/languages'),
		main: () => import('./mij/main'),
		pins: () => import('./mij/pins'),
		profile: () => import('./mij/profile'),
		registration: () => import('./mij/registration'),
		settings: () => import('./mij/settings'),
		sms: () => import('./mij/sms'),
		socialRecovery: () => import('./mij/socialRecovery'),
		statement: () => import('./mij/statement'),
		transfer: () => import('./mij/transfer'),
		voucher: () => import('./mij/voucher')
	},
	swa: {
		auth: () => import('./swa/auth'),
		balances: () => import('./swa/balances'),
		feedback: () => import('./swa/feedback'),
		helpers: () => import('./swa/helpers'),
		languages: () => import('./swa/languages'),
		main: () => import('./swa/main'),
		pins: () => import('./swa/pins'),
		profile: () => import('./swa/profile'),
		registration: () => import('./swa/registration'),
		settings: () => import('./swa/settings'),
		sms: () => import('./swa/sms'),
		socialRecovery: () => import('./swa/socialRecovery'),
		statement: () => import('./swa/statement'),
		transfer: () => import('./swa/transfer'),
		voucher: () => import('./swa/voucher')
	}
}

const updateDictionary = (locale: Locales, dictionary: Partial<Translations>): Translations =>
	loadedLocales[locale] = { ...loadedLocales[locale], ...dictionary }

export const importLocaleAsync = async (locale: Locales): Promise<Translations> =>
	(await localeTranslationLoaders[locale]()).default as unknown as Translations

export const loadLocaleAsync = async (locale: Locales): Promise<void> => {
	updateDictionary(locale, await importLocaleAsync(locale))
	loadFormatters(locale)
}

export const loadAllLocalesAsync = (): Promise<void[]> => Promise.all(locales.map(loadLocaleAsync))

export const loadFormatters = (locale: Locales): void =>
	void (loadedFormatters[locale] = initFormatters(locale))

export const importNamespaceAsync = async<Namespace extends Namespaces>(locale: Locales, namespace: Namespace) =>
	(await localeNamespaceLoaders[locale][namespace]()).default as unknown as Translations[Namespace]

export const loadNamespaceAsync = async <Namespace extends Namespaces>(locale: Locales, namespace: Namespace): Promise<void> =>
	void updateDictionary(locale, { [namespace]: await importNamespaceAsync(locale, namespace )})
