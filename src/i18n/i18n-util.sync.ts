// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */

import { initFormatters } from './formatters'
import type { Locales, Translations } from './i18n-types'
import { loadedFormatters, loadedLocales, locales } from './i18n-util'

import en from './en'
import sw from './sw'

import en_auth from './en/auth'
import en_balances from './en/balances'
import en_feedback from './en/feedback'
import en_helpers from './en/helpers'
import en_language from './en/language'
import en_main from './en/main'
import en_pin from './en/pin'
import en_profile from './en/profile'
import en_registration from './en/registration'
import en_settings from './en/settings'
import en_socialRecovery from './en/socialRecovery'
import en_statement from './en/statement'
import en_transfer from './en/transfer'
import en_voucher from './en/voucher'
import sw_auth from './sw/auth'
import sw_balances from './sw/balances'
import sw_feedback from './sw/feedback'
import sw_helpers from './sw/helpers'
import sw_language from './sw/language'
import sw_main from './sw/main'
import sw_pin from './sw/pin'
import sw_profile from './sw/profile'
import sw_registration from './sw/registration'
import sw_settings from './sw/settings'
import sw_socialRecovery from './sw/socialRecovery'
import sw_statement from './sw/statement'
import sw_transfer from './sw/transfer'
import sw_voucher from './sw/voucher'

const localeTranslations = {
	en: {
		...en,
		auth: en_auth,
		balances: en_balances,
		feedback: en_feedback,
		helpers: en_helpers,
		language: en_language,
		main: en_main,
		pin: en_pin,
		profile: en_profile,
		registration: en_registration,
		settings: en_settings,
		socialRecovery: en_socialRecovery,
		statement: en_statement,
		transfer: en_transfer,
		voucher: en_voucher
	},
	sw: {
		...sw,
		auth: sw_auth,
		balances: sw_balances,
		feedback: sw_feedback,
		helpers: sw_helpers,
		language: sw_language,
		main: sw_main,
		pin: sw_pin,
		profile: sw_profile,
		registration: sw_registration,
		settings: sw_settings,
		socialRecovery: sw_socialRecovery,
		statement: sw_statement,
		transfer: sw_transfer,
		voucher: sw_voucher
	},
}

export const loadLocale = (locale: Locales): void => {
	if (loadedLocales[locale]) return

	loadedLocales[locale] = localeTranslations[locale] as unknown as Translations
	loadFormatters(locale)
}

export const loadAllLocales = (): void => locales.forEach(loadLocale)

export const loadFormatters = (locale: Locales): void =>
	void (loadedFormatters[locale] = initFormatters(locale))
